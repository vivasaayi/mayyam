# Fast and Simple Dockerfile - No complex conditionals
FROM rust:1.85-slim AS builder

WORKDIR /usr/src/app

# Install all dependencies in one go (simpler, faster)
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        pkg-config \
        libssl-dev \
        build-essential \
        zlib1g-dev \
        curl \
        ca-certificates \
        git \
        cmake \
        g++ \
        libsasl2-dev && \
    rm -rf /var/lib/apt/lists/*

# Build librdkafka from source (required for ARM64 compatibility)
RUN git clone --depth 1 --branch v2.10.0 https://github.com/confluentinc/librdkafka.git /tmp/librdkafka && \
    cd /tmp/librdkafka && \
    ./configure --prefix=/usr/local && \
    make -j"$(nproc)" && \
    make install && \
    rm -rf /tmp/librdkafka

# Set PKG_CONFIG_PATH for the built librdkafka
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH

# Quick librdkafka check
RUN pkg-config --modversion rdkafka

# Copy and build dependencies first (for caching)
COPY Cargo.toml Cargo.lock ./
RUN mkdir -p src && \
    echo 'fn main() { println!("Dummy build"); }' > src/main.rs && \
    cargo build --release --quiet && \
    rm -rf src

# Copy source and build final app
COPY src ./src/
COPY config.default.yml config.yml ./

RUN cargo build --release --quiet

# Strip binary for smaller size
RUN strip target/release/mayyam

# Runtime stage - minimal and secure
FROM debian:bullseye-slim

WORKDIR /app

# Install minimal runtime deps
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        libssl1.1 \
        curl && \
    rm -rf /var/lib/apt/lists/*

# Copy app and configs
COPY --from=builder /usr/src/app/target/release/mayyam /app/mayyam
COPY --from=builder /usr/src/app/config.default.yml /app/config.default.yml
COPY --from=builder /usr/src/app/config.yml /app/config.yml

# Copy librdkafka libraries we built
COPY --from=builder /usr/local/lib/librdkafka* /usr/local/lib/

# Create non-root user
RUN useradd --create-home --shell /bin/bash appuser && \
    chown -R appuser:appuser /app
USER appuser

# Runtime config
ENV RUST_LOG=info
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

CMD ["/app/mayyam", "server", "--host", "0.0.0.0", "--port", "8080"]
