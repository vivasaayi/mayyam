use serde_json::Value;
use chrono::{DateTime, Utc};

pub struct HtmlGenerator;

impl HtmlGenerator {
    pub fn generate_analysis_html(
        title: &str,
        analysis_data: &Value,
        timestamp: DateTime<Utc>,
    ) -> String {
        let mut html = format!(
            r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            background: white;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        .header {{
            border-bottom: 2px solid #007acc;
            padding-bottom: 20px;
            margin-bottom: 30px;
        }}
        .title {{
            color: #007acc;
            font-size: 2.5em;
            margin: 0;
            font-weight: 300;
        }}
        .timestamp {{
            color: #666;
            font-size: 0.9em;
            margin-top: 10px;
        }}
        .section {{
            margin-bottom: 30px;
            padding: 20px;
            border-left: 4px solid #007acc;
            background: #f8f9fa;
        }}
        .section-title {{
            color: #007acc;
            font-size: 1.5em;
            margin: 0 0 15px 0;
            font-weight: 500;
        }}
        .metric-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}
        .metric-card {{
            background: white;
            border: 1px solid #ddd;
            border-radius: 6px;
            padding: 15px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }}
        .metric-name {{
            font-weight: bold;
            color: #333;
            margin-bottom: 8px;
        }}
        .metric-value {{
            font-size: 1.2em;
            color: #007acc;
            font-weight: 500;
        }}
        .status-indicator {{
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 8px;
        }}
        .status-unused {{ background-color: #28a745; }}
        .status-used {{ background-color: #dc3545; }}
        .insights-list {{
            list-style: none;
            padding: 0;
        }}
        .insights-list li {{
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }}
        .insights-list li:last-child {{
            border-bottom: none;
        }}
        .recommendation {{
            background: #e3f2fd;
            border: 1px solid #2196f3;
            border-radius: 6px;
            padding: 15px;
            margin: 10px 0;
        }}
        .recommendation-title {{
            font-weight: bold;
            color: #1976d2;
            margin-bottom: 8px;
        }}
        .code-block {{
            background: #f6f8fa;
            border: 1px solid #d1d9e0;
            border-radius: 6px;
            padding: 15px;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 0.9em;
            overflow-x: auto;
            margin: 15px 0;
        }}
        .footer {{
            text-align: center;
            color: #666;
            font-size: 0.9em;
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ddd;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1 class="title">{}</h1>
            <div class="timestamp">Generated on: {}</div>
        </div>
"#,
            title, title, timestamp.format("%Y-%m-%d %H:%M:%S UTC")
        );

        // Add analysis content
        html.push_str(&Self::generate_analysis_content(analysis_data));

        html.push_str(&format!(
            r#"
        <div class="footer">
            <p>Analysis generated by Mayyam - DevOps & SRE Toolbox</p>
        </div>
    </div>
</body>
</html>"#
        ));

        html
    }

    fn generate_analysis_content(data: &Value) -> String {
        let mut content = String::new();

        // Resource information
        if let (Some(resource_id), Some(resource_type)) = (
            data.get("resource_id").and_then(|v| v.as_str()),
            data.get("resource_type").and_then(|v| v.as_str()),
        ) {
            content.push_str(&format!(
                r#"<div class="section">
    <h2 class="section-title">Resource Information</h2>
    <p><strong>Resource ID:</strong> {}</p>
    <p><strong>Resource Type:</strong> {}</p>
</div>"#,
                resource_id, resource_type
            ));
        }

        // Unused analysis
        if let Some(unused) = data.get("unused_analysis") {
            content.push_str(r#"<div class="section">
    <h2 class="section-title">Unused Resource Analysis</h2>"#);

            if let Some(periods) = unused.as_object() {
                for (period, analysis) in periods {
                    let is_unused = analysis.get("unused").and_then(|v| v.as_bool()).unwrap_or(false);
                    let status_class = if is_unused { "status-unused" } else { "status-used" };
                    let status_text = if is_unused { "Unused" } else { "In Use" };

                    content.push_str(&format!(
                        r#"<div class="metric-card">
    <div class="metric-name">
        <span class="status-indicator {}"></span>{}
    </div>
    <div class="metric-value">{}</div>
</div>"#,
                        status_class, period, status_text
                    ));
                }
            }

            content.push_str("</div>");
        }

        // Usage classification
        if let Some(score) = data.get("usage_score").and_then(|v| v.as_i64()) {
            let description = match score {
                1..=3 => "Very Low Usage",
                4..=6 => "Moderate Usage",
                7..=8 => "High Usage",
                9..=10 => "Very High Usage",
                _ => "Unknown",
            };

            content.push_str(&format!(
                r#"<div class="section">
    <h2 class="section-title">Usage Classification</h2>
    <div class="metric-card">
        <div class="metric-name">Usage Score</div>
        <div class="metric-value">{}/10 - {}</div>
    </div>
</div>"#,
                score, description
            ));
        }

        // Insights
        if let Some(insights) = data.get("insights").and_then(|v| v.as_array()) {
            content.push_str(r#"<div class="section">
    <h2 class="section-title">Key Insights</h2>
    <ul class="insights-list">"#);

            for insight in insights {
                if let Some(text) = insight.as_str() {
                    content.push_str(&format!("<li>{}</li>", text));
                }
            }

            content.push_str("</ul></div>");
        }

        // Recommendations
        if let Some(recommendations) = data.get("recommendations").and_then(|v| v.as_array()) {
            content.push_str(r#"<div class="section">
    <h2 class="section-title">Recommendations</h2>"#);

            for recommendation in recommendations {
                if let Some(text) = recommendation.as_str() {
                    content.push_str(&format!(
                        r#"<div class="recommendation">
    <div class="recommendation-title">Action Required</div>
    <p>{}</p>
</div>"#,
                        text
                    ));
                }
            }

            content.push_str("</div>");
        }

        // Raw analysis
        if let Some(raw) = data.get("raw_response").and_then(|v| v.as_str()) {
            content.push_str(&format!(
                r#"<div class="section">
    <h2 class="section-title">Detailed Analysis</h2>
    <div class="code-block">{}</div>
</div>"#,
                raw.replace("\n", "<br>")
            ));
        }

        content
    }

    pub fn generate_simple_html(content: &str, title: &str) -> String {
        format!(
            r#"<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{}</title>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .content {{
            background: white;
            border-radius: 8px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }}
        pre {{
            background: #f6f8fa;
            border: 1px solid #d1d9e0;
            border-radius: 6px;
            padding: 15px;
            overflow-x: auto;
            white-space: pre-wrap;
        }}
    </style>
</head>
<body>
    <div class="content">
        <h1>{}</h1>
        <pre>{}</pre>
    </div>
</body>
</html>"#,
            title, title, content
        )
    }
}
